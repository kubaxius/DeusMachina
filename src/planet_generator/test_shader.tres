[gd_resource type="VisualShader" load_steps=10 format=3 uid="uid://dpfkaigfla5"]

[ext_resource type="Texture2D" uid="uid://chij0ohx82iq" path="res://planet_generator/ColorGrid.png" id="1_x0kub"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/simplex3d.gd" id="2_aqs3x"]

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_yag1j"]
texture = ExtResource("1_x0kub")

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_h128q"]
size = Vector2(260, 300)
expression = "vertex = VERTEX"

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_e3eah"]
default_input_values = [1, Vector3(0, 0, 0), 2, 5.0, 3, 0.0]
initialized = true
script = ExtResource("2_aqs3x")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_w0lo1"]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_a1cs8"]
source = 5

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_e8isy"]
parameter_name = "SplatMapTexture"
texture_type = 1
color_default = 1

[sub_resource type="VisualShaderNodeColorOp" id="VisualShaderNodeColorOp_owy6j"]
operator = 8

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D SplatMapTexture : source_color, hint_default_black;



void fragment() {
// Input:2
	vec2 n_out2p0 = UV;


	vec4 n_out4p0;
// Texture2D:4
	n_out4p0 = texture(SplatMapTexture, n_out2p0);


	vec3 n_out9p0;
// ColorOp:9
	{
		float base = vec3(n_out4p0.xyz).x;
		float blend = vec3(n_out4p0.xyz).x;
		if (base < 0.5) {
			n_out9p0.x = (base * (2.0 * blend));
		} else {
			n_out9p0.x = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}
	{
		float base = vec3(n_out4p0.xyz).y;
		float blend = vec3(n_out4p0.xyz).y;
		if (base < 0.5) {
			n_out9p0.y = (base * (2.0 * blend));
		} else {
			n_out9p0.y = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}
	{
		float base = vec3(n_out4p0.xyz).z;
		float blend = vec3(n_out4p0.xyz).z;
		if (base < 0.5) {
			n_out9p0.z = (base * (2.0 * blend));
		} else {
			n_out9p0.z = (1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5)));
		}
	}


// Output:0
	ALBEDO = n_out9p0;


}
"
nodes/fragment/0/position = Vector2(1500, 240)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_w0lo1")
nodes/fragment/2/position = Vector2(380, 420)
nodes/fragment/4/node = SubResource("VisualShaderNodeTexture_a1cs8")
nodes/fragment/4/position = Vector2(800, 460)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture2DParameter_e8isy")
nodes/fragment/6/position = Vector2(400, 580)
nodes/fragment/9/node = SubResource("VisualShaderNodeColorOp_owy6j")
nodes/fragment/9/position = Vector2(1040, 320)
nodes/fragment/10/node = SubResource("VisualShaderNodeTexture_yag1j")
nodes/fragment/10/position = Vector2(720, 140)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_h128q")
nodes/fragment/11/position = Vector2(820, 640)
nodes/fragment/11/size = Vector2(260, 300)
nodes/fragment/11/input_ports = ""
nodes/fragment/11/output_ports = "0,4,vertex;"
nodes/fragment/11/expression = "vertex = VERTEX"
nodes/fragment/12/node = SubResource("VisualShaderNodeCustom_e3eah")
nodes/fragment/12/position = Vector2(1237.11, 535.219)
nodes/fragment/connections = PackedInt32Array(6, 0, 4, 2, 4, 0, 9, 1, 2, 0, 10, 0, 2, 0, 4, 0, 11, 0, 12, 0, 9, 0, 0, 0, 4, 0, 9, 0)
